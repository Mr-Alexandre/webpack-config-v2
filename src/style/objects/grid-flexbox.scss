@mixin make-container() {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
}

@mixin make-container-max-widths($max-widths: $gridContainers, $breakpoints: $gridBreakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: #{$container-max-width}px;
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: #{($gridGap / -2)}px;
  margin-left: #{($gridGap / -2)}px;
}

@mixin make-col-ready() {
  position: relative;
  width: 100%;
  min-height: 1px; // Prevent collapsing
  padding-right: #{($gridGap / 2)}px;
  padding-left: #{($gridGap / 2)}px;
}

@mixin make-col($size, $columns: $gridColumns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $gridColumns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

@mixin make-grid-columns($columns: $gridColumns, $gutter: $gridGap, $breakpoints: $gridBreakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: #{($gutter / 2)}px;
    padding-left: #{($gutter / 2)}px;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .#{$gridPrefix}col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .#{$gridPrefix}col#{$infix},
    .#{$gridPrefix}col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .#{$gridPrefix}col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .#{$gridPrefix}col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .#{$gridPrefix}col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .#{$gridPrefix}order#{$infix}-first { order: -1; }

      .#{$gridPrefix}order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .#{$gridPrefix}order#{$infix}-#{$i} { order: $i; }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .#{$gridPrefix}offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}



// Generate
.#{$gridPrefix}container {
  @include make-container();
  @include make-container-max-widths();
}

.#{$gridPrefix}row {
  @include make-row();
}

.#{$gridPrefix}no-gutters {
  margin-right: 0;
  margin-left: 0;

  > .#{$gridPrefix}col,
  > [class*="#{$gridPrefix}col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}

@include make-grid-columns();
